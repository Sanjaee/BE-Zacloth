generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique   // untuk login
  googleId  String?   @unique
  email     String?   @unique   // opsional, kalau diisi harus unik
  password  String?
  role      String    @default("client") // admin atau client
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relasi ke Profile (1-1)
  profile   Profile?

  // Relasi ke Product (1-N)
  products  Product[]

  // Relasi ke Payment (1-N)
  payments  Payment[]

  // Relasi ke UserAddress (1-N)
  addresses UserAddress[]
}

model Profile {
  id        String   @id @default(cuid())
  fullName  String              // nama lengkap user
  bio       String?
  avatarUrl String?

  // Media sosial
  instagram String?
  tiktok    String?
  xAccount  String?   // Twitter / X
  facebook  String?
  youtube   String?
  linkedin  String?

  userId    String   @unique

  // Relasi balik ke User
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id             String       @id @default(cuid())
  isOnSale       Boolean
  isNikeByYou    Boolean
  catalogId      String       @unique
  brand          String
  category       String
  cloudProductId String
  color          String
  country        String
  currentPrice   Int
  fullPrice      Int
  name           String
  slug           String       @unique // URL-friendly slug
  prodigyId      String
  imageUrl       String       // Main image (backward compatibility)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relasi ke tabel lain
  genders        Gender[]
  skuData        SkuData[]
  subCategories  SubCategory[]
  images         ProductImage[] // Multiple images

  // Relasi ke User (pemilik produk)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)  

  // Relasi ke Payment (1-N)
  payments       Payment[]
}

model SkuData {
  id        String   @id @default(cuid())
  size      String
  sku       String
  gtin      String

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model SubCategory {
  id        String   @id @default(cuid())
  name      String

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Gender {
  id        String   @id @default(cuid())
  type      String   // contoh: "MEN", "WOMEN"

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model ProductImage {
  id        String   @id @default(cuid())
  imageUrl  String   // Path to image file
  altText   String?  // Alternative text for accessibility
  order     Int      @default(0) // Order of images (0 = first/main image)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Visitor {
  id        String   @id @default(cuid())
  page      String   // Page visited
  userAgent String?  // Browser user agent
  referrer  String?  // Referrer URL
  ip        String?  // IP address
  visitedAt DateTime @default(now())
}

model UserAddress {
  id              String   @id @default(cuid())
  recipientName   String              // nama penerima
  phoneNumber     String              // nomor HP penerima
  provinceId      Int                 // ID provinsi RajaOngkir
  provinceName    String              // Nama provinsi
  cityId          Int                 // ID kota/kabupaten
  cityName        String              // Nama kota/kabupaten
  subdistrictId   Int?                // ID kecamatan
  subdistrictName String?             // Nama kecamatan
  postalCode      String              // kode pos
  addressDetail   String              // alamat lengkap
  isPrimary       Boolean  @default(false)

  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  shipments       Shipment[] // relasi ke ongkir/ekspedisi
}

model Shipment {
  id            String   @id @default(cuid())
  courier       String              // jne, tiki, pos, jne:REG, jne:YES, dsb
  service       String              // REG, YES, OKE
  description   String?             // deskripsi layanan
  weight        Int                 // berat barang (gram)
  cost          Int                 // ongkos kirim
  etd           String?             // estimasi waktu pengiriman (ex: "2-3 hari")
  note          String?             // catatan tambahan (jika ada)

  // relasi ke alamat tujuan
  addressId     String
  address       UserAddress @relation(fields: [addressId], references: [id], onDelete: Cascade)

  // relasi ke payment (jika dikaitkan dengan order)
  paymentId     String?
  payment       Payment?   @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id                    String        @id @default(uuid())
  orderId               String        @unique
  userId                String
  productId             String?
  amount                Int
  adminFee              Int           @default(0)
  totalAmount           Int
  paymentMethod         String        // credit_card, bank_transfer, gopay, etc
  paymentType           String?       // qris, bank_transfer, credit_card, etc
  status                PaymentStatus @default(PENDING)
  snapRedirectUrl       String?
  midtransTransactionId String?
  transactionStatus     String?
  fraudStatus           String?
  paymentCode           String?       // untuk bank transfer
  vaNumber              String?       // untuk virtual account
  bankType              String?       // mandiri, bca, bni, etc
  expiryTime            DateTime?
  paidAt                DateTime?
  midtransResponse      String?       // JSON response from Midtrans
  midtransAction        String?       // JSON.stringify(result.actions)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relasi
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  shipments Shipment[]
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  EXPIRED
}
